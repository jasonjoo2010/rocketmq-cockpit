<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ndpmedia.rocketmq.cockpit.mybatis.mapper.ConsumeProgressMapper">

    <update id="create" statementType="STATEMENT">
        CREATE TABLE IF NOT EXISTS consume_progress_${group} (
        id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        consumer_group VARCHAR(255) NOT NULL,
        topic VARCHAR(255) NOT NULL,
        broker_name VARCHAR(255) NOT NULL,
        queue_id INT NOT NULL,
        broker_offset BIGINT NOT NULL DEFAULT 0,
        consumer_offset BIGINT NOT NULL DEFAULT 0,
        last_timestamp BIGINT NOT NULL DEFAULT 0,
        diff BIGINT NOT NULL DEFAULT 0,
        create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        ) ENGINE = INNODB;
    </update>

    <insert id="insert" parameterType="list">
        INSERT INTO consume_progress(id, consumer_group, topic, broker_name, queue_id, broker_offset, consumer_offset, last_timestamp, diff, create_time)
        VALUES 
        <foreach collection="list" item="ConsumeProgress" separator=",">
            (NULL, #{ConsumeProgress.consumerGroup}, #{ConsumeProgress.topic}, #{ConsumeProgress.brokerName}, #{ConsumeProgress.queueId}, #{ConsumeProgress.brokerOffset}, #{ConsumeProgress.consumerOffset}, #{ConsumeProgress.lastTimestamp}, #{ConsumeProgress.diff}, #{ConsumeProgress.createTime})
        </foreach>
    </insert>

    <insert id="insertPrivate" parameterType="java.util.Map">
        INSERT INTO consume_progress_${map.tableID} (id, consumer_group, topic, broker_name, queue_id, broker_offset, consumer_offset, last_timestamp, diff, create_time)
        VALUES 
        <foreach collection="map.consumeProgresses" item="ConsumeProgress" separator=",">
            (NULL, #{ConsumeProgress.consumerGroup}, #{ConsumeProgress.topic}, #{ConsumeProgress.brokerName}, #{ConsumeProgress.queueId}, #{ConsumeProgress.brokerOffset}, #{ConsumeProgress.consumerOffset}, #{ConsumeProgress.lastTimestamp}, #{ConsumeProgress.diff}, #{ConsumeProgress.createTime})
        </foreach>
    </insert>

    <update id="updateTopicProgress">
        INSERT INTO topic_progress (broker_offset,create_time,topic,broker_name,queue_id,last_timestamp)
        SELECT MAX(broker_offset) as broker_offset, create_time , topic , broker_name , queue_id, MAX(last_timestamp) AS last_timestamp
        FROM consume_progress
        WHERE 1 = 1 and create_time = #{date}
        GROUP BY create_time , topic , broker_name , queue_id
    </update>

    <delete id="delete" parameterType="long">
        DELETE
        FROM consume_progress
        WHERE id = #{id}
    </delete>

    <delete id="bulkDelete" parameterType="date">
        DELETE
        FROM consume_progress${groupName}
        WHERE #{date} > create_time
    </delete>

    <delete id="bulkDeleteT">
        DELETE
        FROM topic_progress
        WHERE #{date} > create_time
    </delete>

    <resultMap id="consumerGroupMap" type="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroup">
        <id column="id" property="id" />
        <result column="cluster_name" property="clusterName" />
        <result column="which_broker_when_consume_slowly" property="whichBrokerWhenConsumeSlowly" />
        <result column="group_name" property="groupName" />
        <result column="consume_enable" property="consumeEnable" />
        <result column="consume_broadcast_enable" property="consumeBroadcastEnable" />
        <result column="consume_from_broker_id" property="consumeFromBrokerId" />
        <result column="retry_max_times" property="retryMaxTimes" />
        <result column="retry_queue_num" property="retryQueueNum" />
        <result column="consume_from_min_enable" property="consumeFromMinEnable" />
        <result column="status_id" property="status"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"
                javaType="com.ndpmedia.rocketmq.cockpit.model.Status" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <resultMap id="consumeProgressMap" type="com.ndpmedia.rocketmq.cockpit.model.ConsumeProgress">
        <id column="id" property="id" />
        <result column="topic" property="topic" />
        <result column="broker_name" property="brokerName" />
        <result column="queue_id" property="queueId" />
        <result column="broker_offset" property="brokerOffset" />
        <result column="last_timestamp" property="lastTimestamp" />
        <result column="diff" property="diff" />
        <result column="create_time" property="createTime" />
        <result column="consumer_group" property="consumerGroup" />
    </resultMap>

    <select id="consumerGroupList" resultType="string">
        SELECT consumer_group
        FROM consume_progress
        WHERE 1 = 1

        GROUP BY consumer_group
    </select>

    <select id="topicList" resultType="string">
        SELECT topic
        FROM consume_progress
        WHERE 1 = 1

        <if test="consumerGroup != null">
            AND consumer_group = #{consumerGroup}
        </if>
        GROUP BY topic
    </select>

    <select id="brokerList" resultType="string">
        SELECT broker_name
        FROM consume_progress
        WHERE 1 = 1

        <if test="consumerGroup != null">
            AND consumer_group = #{consumerGroup}
        </if>

        <if test="topic != null">
            AND topic = #{topic}
        </if>

        GROUP BY broker_name
    </select>

    <select id="queueList" resultType="string">
        SELECT queue_id
        FROM consume_progress
        WHERE 1 = 1

        <if test="consumerGroup != null">
            AND consumer_group = #{consumerGroup}
        </if>

        <if test="topic != null">
            AND topic = #{topic}
        </if>

        <if test="brokerName != null">
            AND broker_name = #{brokerName}
        </if>

        GROUP BY queue_id
    </select>

    <select id="brokerTPSListOLD" resultMap="consumeProgressMap">
        SELECT sum(broker_offset) as broker_offset, create_time

        <if test="consumerGroup != null">
            , consumer_group
        </if>

        <if test="topic != null">
            , topic
        </if>

        <if test="brokerName != null">
            , broker_name
        </if>

        <if test="queueId > -1">
            , queue_id
        </if>

        <if test="consumerGroup ==null">
            FROM
            (SELECT MAX(broker_offset) as broker_offset, create_time
            , topic
            , broker_name
            , queue_id
        </if>
        FROM consume_progress
        WHERE 1 = 1

        <if test="consumerGroup != null">
            AND consumer_group = #{consumerGroup}
        </if>

        <if test="topic != null">
            AND topic = #{topic}
        </if>

        <if test="brokerName != null">
            AND broker_name = #{brokerName}
        </if>

        <if test="queueId > -1">
            AND queue_id = #{queueId}
        </if>

        <if test="consumerGroup ==null">
            GROUP BY create_time
            , topic
            , broker_name
            , queue_id
            ) temp
        </if>
        GROUP BY create_time

        <if test="consumerGroup != null">
            , consumer_group
        </if>

        <if test="topic != null">
            , topic
        </if>

        <if test="brokerName != null">
            , broker_name
        </if>

        <if test="queueId > -1">
            , queue_id
        </if>
        ORDER BY create_time desc limit 1000
    </select>

    <select id="brokerTPSList" resultMap="consumeProgressMap">
        SELECT sum(broker_offset) as broker_offset, create_time

        <if test="topic != null">
            , topic
        </if>

        <if test="brokerName != null">
            , broker_name
        </if>

        <if test="queueId > -1">
            , queue_id
        </if>

        FROM topic_progress
        WHERE 1 = 1

        <if test="topic != null">
            AND topic = #{topic}
        </if>

        <if test="brokerName != null">
            AND broker_name = #{brokerName}
        </if>

        <if test="queueId > -1">
            AND queue_id = #{queueId}
        </if>

        GROUP BY create_time

        <if test="topic != null">
            , topic
        </if>

        <if test="brokerName != null">
            , broker_name
        </if>

        <if test="queueId > -1">
            , queue_id
        </if>
        ORDER BY create_time desc limit 1000
    </select>

    <select id="diffList" resultMap="consumeProgressMap">
        SELECT sum(diff) as diff, create_time

        <if test="consumerGroup != null">
            , consumer_group
        </if>

        <if test="topic != null">
            , topic
        </if>

        <if test="brokerName != null">
            , broker_name
        </if>

        <if test="queueId > -1">
            , queue_id
        </if>
        FROM consume_progress${tableID}
        WHERE 1 = 1

        <if test="consumerGroup != null">
            AND consumer_group = #{consumerGroup}
        </if>

        <if test="topic != null">
            AND topic = #{topic}
        </if>

        <if test="brokerName != null">
            AND broker_name = #{brokerName}
        </if>

        <if test="queueId > -1">
            AND queue_id = #{queueId}
        </if>

        GROUP BY create_time

        <if test="consumerGroup != null">
            , consumer_group
        </if>

        <if test="topic != null">
            , topic
        </if>

        <if test="brokerName != null">
            , broker_name
        </if>

        <if test="queueId > -1">
            , queue_id
        </if>
        ORDER BY create_time desc limit 1000
    </select>

    <select id="lastDiff" resultType="map" parameterType="date">
        SELECT sum(cp.diff) as diff, cp.create_time

        <if test="consumerGroup != null">
            , cp.consumer_group as consumerGroup, cg.warn_threshold as threshold1, cg.fatal_threshold as threshold2
        </if>

        <if test="topic != null">
            , cp.topic
        </if>

        <if test="brokerName != null">
            , cp.broker_name
        </if>

        <if test="queueId > -1">
            , cp.queue_id
        </if>
        FROM consume_progress  cp
        LEFT JOIN consumer_group cg
        ON cp.consumer_group = cg.group_name
        WHERE 1 = 1

        <if test="consumerGroup != null">
            AND cp.consumer_group like #{consumerGroup}
        </if>

        <if test="topic != null">
            AND cp.topic = #{topic}
        </if>

        <if test="brokerName != null">
            AND cp.broker_name = #{brokerName}
        </if>

        <if test="queueId > -1">
            AND cp.queue_id = #{queueId}
        </if>

        <if test="date != null">
            AND cp.create_time > #{date}
        </if>

        GROUP BY cp.create_time

        <if test="consumerGroup != null">
            , cp.consumer_group
        </if>

        <if test="topic != null">
            , cp.topic
        </if>

        <if test="brokerName != null">
            , cp.broker_name
        </if>

        <if test="queueId > -1">
            , cp.queue_id
        </if>
        ORDER BY cp.create_time desc
    </select>

    <select id="list" resultMap="consumeProgressMap">
        SELECT id, consumer_group, topic, broker_name, queue_id, broker_offset, consumer_offset, last_timestamp, diff, create_time
        FROM consume_progress
        WHERE 1 = 1

        <if test="consumerGroup != null">
            AND consumer_group = #{consumerGroup}
        </if>

        <if test="topic != null">
            AND topic = #{topic}
        </if>

        <if test="brokerName != null">
            AND broker_name = #{brokerName}
        </if>

        <if test="queueId > -1">
            AND queue_id = #{queueId}
        </if>
        ORDER BY consumer_group , topic, broker_name, queue_id, create_time desc limit 1000
    </select>

    <select id="groupTableXREFList" resultType="map">
        SELECT id, group_name
        FROM consumer_group_table_xref
    </select>

    <select id="groupTableMAXID" resultType="int">
        SELECT MAX(id)
        FROM consumer_group_table_xref
    </select>

    <select id="groupTableMINID" resultType="int">
        SELECT MIN(id)
        FROM consumer_group_table_xref
    </select>

    <select id="groupTableIDS" resultType="int">
        SELECT id
        FROM consumer_group_table_xref
    </select>

    <select id="groupTableID" resultType="int">
        SELECT id
        FROM consumer_group_table_xref
        WHERE group_name = #{groupName}
    </select>

    <insert id="groupTableXREFInsert">
        INSERT INTO consumer_group_table_xref(id, group_name)
        VALUES (#{id}, #{groupName})
    </insert>

    <select id="lastrow" resultMap="consumeProgressMap">
        SELECT create_time
        FROM consume_progress
        GROUP by create_time
        ORDER by create_time desc
        LIMIT 2
    </select>

    <select id="topicReady" resultMap="consumeProgressMap">
        SELECT topic,broker_name,queue_id,broker_offset,create_time
        FROM topic_progress
        WHERE create_time = #{date}
        LIMIT 1
    </select>
</mapper>