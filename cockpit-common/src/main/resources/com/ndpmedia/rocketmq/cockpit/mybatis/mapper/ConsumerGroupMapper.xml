<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ndpmedia.rocketmq.cockpit.mybatis.mapper.ConsumerGroupMapper">

    <insert id="insert" parameterType="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroup" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO consumer_group (id, cluster_name, group_name, consume_enable, consume_broadcast_enable, status_id, update_time, retry_queue_num)
        VALUES (NULL, #{clusterName}, #{groupName}, #{consumeEnable}, #{consumeBroadcastEnable}, #{status.ordinal}, #{updateTime}, #{retryQueueNum})
    </insert>

    <insert id="connectProject">
        INSERT INTO project_consumer_group_xref(consumer_group_id, project_id)
        VALUES (#{consumerGroupId}, #{projectId})
    </insert>

    <update id="update" parameterType="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroup">
        UPDATE consumer_group
        SET cluster_name = #{clusterName},
            which_broker_when_consume_slowly = #{whichBrokerWhenConsumeSlowly},
            group_name = #{groupName}, consume_enable = #{consumeEnable},
            consume_broadcast_enable = #{consumeBroadcastEnable},
            consume_from_broker_id = #{consumeFromBrokerId},
            retry_max_times = #{retryMaxTimes}, retry_queue_num = #{retryQueueNum},
            consume_from_min_enable = #{consumeFromMinEnable}, status_id = #{status.id},
            create_time = #{createTime}, update_time = #{updateTime}
    </update>

    <update id="refresh">
      UPDATE broker_consumer_group_xref AS bcgx
      SET bcgx.sync_time = CURRENT_TIMESTAMP
      WHERE bcgx.broker_id = #{brokerId}
            AND bcgx.consumer_group_id = #{consumerGroupId}
    </update>

    <delete id="delete" parameterType="long">
        DELETE
        FROM consumer_group
        WHERE id = #{id}
    </delete>

    <delete id="disconnectProject">
        DELETE
        FROM project_consumer_group_xref
        WHERE 1 = 1
        <if test="consumerGroupId > 0">
            AND consumer_group_id = #{consumerGroupId}
        </if>

        <if test="projectId > 0">
            AND project_id = #{projectId}
        </if>
    </delete>

    <resultMap id="consumerGroupMap" type="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroup">
        <id column="id" property="id" />
        <result column="cluster_name" property="clusterName" />
        <result column="which_broker_when_consume_slowly" property="whichBrokerWhenConsumeSlowly" />
        <result column="consume_from_broker_id" property="consumeFromBrokerId" />
        <result column="group_name" property="groupName" />
        <result column="consume_enable" property="consumeEnable" />
        <result column="consume_broadcast_enable" property="consumeBroadcastEnable" />
        <result column="retry_max_times" property="retryMaxTimes" />
        <result column="retry_queue_num" property="retryQueueNum" />
        <result column="consume_from_min_enable" property="consumeFromMinEnable" />
        <result column="status_id" property="status"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"
                javaType="com.ndpmedia.rocketmq.cockpit.model.Status" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <select id="list" resultMap="consumerGroupMap">
        SELECT cg.id, cg.cluster_name, which_broker_when_consume_slowly, consume_from_broker_id, group_name,
               consume_enable, consume_broadcast_enable, retry_max_times, retry_queue_num, consume_from_min_enable,
               status_id, cg.create_time, cg.update_time
        FROM consumer_group AS cg
        <if test="projectId > 0">
            JOIN project_consumer_group_xref AS pcgx ON pcgx.consumer_group_id = id
        </if>

        <if test="brokerAddress != null || brokerId > 0">
            JOIN broker_consumer_group_xref AS bcgx ON bcgx.consumer_group_id = cg.id
            JOIN broker AS b ON b.id = bcgx.broker_id
        </if>

        WHERE 1 = 1

        <if test="projectId > 0">
            AND pcgx.project_id = #{projectId}
        </if>

        <if test="clusterName != null">
            AND b.cluster_name = #{clusterName}
        </if>

        <if test="consumerGroupName != null">
            AND cg.group_name = #{consumerGroupName}
        </if>

        <if test="brokerId > 0">
            AND b.id = #{brokerId}
        </if>

        <if test="brokerAddress != null">
            AND b.address = #{brokerAddress}
        </if>
    </select>

    <select id="listByProject" resultMap="consumerGroupMap">
        SELECT cg.id, cg.cluster_name, cg.which_broker_when_consume_slowly, cg.group_name, cg.consume_enable, cg.consume_broadcast_enable, cg.retry_max_times, cg.retry_queue_num, cg.consume_from_min_enable, cg.status_id, cg.create_time, cg.update_time
        FROM consumer_group AS cg
        JOIN project_consumer_group_xref AS pcgx ON pcgx.consumer_group_id = cg.id
        WHERE pcgx.project_id = #{projectId}
    </select>

    <select id="listByOtherProject" resultMap="consumerGroupMap">
        SELECT cg.id, cg.cluster_name, cg.which_broker_when_consume_slowly, cg.group_name, cg.consume_enable, cg.consume_broadcast_enable, cg.retry_max_times, cg.retry_queue_num, cg.consume_from_min_enable, cg.status_id, cg.create_time, cg.update_time
        FROM consumer_group AS cg
        JOIN project_consumer_group_xref AS pcgx ON pcgx.consumer_group_id = cg.id
        WHERE pcgx.project_id != #{projectId}
    </select>

    <select id="get" resultMap="consumerGroupMap">
        SELECT id, cluster_name, which_broker_when_consume_slowly, group_name, consume_enable, consume_broadcast_enable, retry_max_times, retry_queue_num, consume_from_min_enable, status_id, create_time, update_time
        FROM consumer_group
        WHERE id = #{id}
    </select>

    <select id="getByName" resultMap="consumerGroupMap">
        SELECT id, cluster_name, which_broker_when_consume_slowly, group_name, consume_enable, consume_broadcast_enable, retry_max_times, retry_queue_num, consume_from_min_enable, status_id, create_time, update_time
        FROM consumer_group
        WHERE group_name = #{groupName}
    </select>

    <resultMap id="consumerGroupHostingResultMap" type="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroupHosting">
        <result column="sync_time" property="syncTime" />
        <result column="hosting_create_time" property="createTime" />
        <result column="hosting_update_time" property="updateTime" />

        <association property="broker" javaType="com.ndpmedia.rocketmq.cockpit.model.Broker">
            <id column="bid" property="id" />
            <result column="cluster_name" property="clusterName" />
            <result column="broker_name" property="brokerName" />
            <result column="broker_id" property="brokerId" />
            <result column="address" property="address" />
            <result column="version" property="version" />
            <result column="dc" property="dc" />
            <result column="update_time" property="updateTime" />
        </association>

        <association property="consumerGroup" javaType="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroup">
            <id column="consumer_group_id" property="id" />
            <result column="which_broker_when_consume_slowly" property="whichBrokerWhenConsumeSlowly" />
            <result column="group_name" property="groupName" />
            <result column="consume_enable" property="consumeEnable" />
            <result column="consume_broadcast_enable" property="consumeBroadcastEnable" />
            <result column="retry_max_times" property="retryMaxTimes" />
            <result column="retry_queue_num" property="retryQueueNum" />
            <result column="consume_from_min_enable" property="consumeFromMinEnable" />
            <result column="consume_from_broker_id" property="consumeFromBrokerId" />
            <result column="cluster_name" property="clusterName" />
        </association>

    </resultMap>

    <select id="queryHosting" resultMap="consumerGroupHostingResultMap" >
        SELECT b.id AS bid, b.cluster_name, b.broker_name, b.broker_id, b.address, b.version, b.dc, b.update_time,
        cg.id AS consumer_group_id, cg.which_broker_when_consume_slowly, cg.group_name, cg.consume_enable, cg.consume_broadcast_enable, cg.retry_max_times, cg.retry_queue_num,
        cg.consume_from_min_enable, cg.consume_from_broker_id,
        bcgx.sync_time, bcgx.create_time AS hosting_create_time, bcgx.update_time AS hosting_update_time
        FROM broker_consumer_group_xref AS bcgx
        JOIN broker AS b ON b.id = bcgx.broker_id
        JOIN consumer_group AS cg ON cg.id = bcgx.consumer_group_id
        WHERE b.broker_id = 0
        <if test="consumerGroupId > 0">
            AND cg.id = #{consumerGroupId}
        </if>

        <if test="statuses != null">
            AND cg.status_id IN
            <foreach collection="statuses" open="(" separator="," close=")" item="status">#{status}</foreach>
        </if>

        <if test="null != brokerId">
            AND b.id = #{brokerId}
        </if>

        <if test="dcId > 0">
            AND b.dc = #{dcId}
        </if>

        <if test="syncTimeDeadline != null">
            AND bcgx.sync_time > #{syncTimeDeadline}
        </if>
    </select>

    <select id="listByTopic" resultMap="consumerGroupMap">
        SELECT cg.id, b.cluster_name, which_broker_when_consume_slowly, consume_from_broker_id, group_name,
            consume_enable, consume_broadcast_enable, retry_max_times, retry_queue_num, consume_from_min_enable,
            status_id, cg.create_time, cg.update_time
        FROM topic_consumer_group_xref AS tcgx
        LEFT JOIN consumer_group AS cg ON tcgx.consumer_group_id = cg.id
        LEFT JOIN broker_consumer_group_xref AS bcgx ON bcgx.consumer_group_id = cg.id
        LEFT JOIN broker AS b on b.id = bcgx.broker_id
        WHERE topic_id = #{topicId}
    </select>

    <update id="updateConsumerGroupTopics">
        INSERT INTO topic_consumer_group_xref (topic_id, consumer_group_id, create_time, update_time)
        SELECT t.id, c.id, nowTime, nowTime FROM (
            SELECT consumer_group, topic, #{date} nowTime
            FROM consume_progress
            WHERE 1 = 1 and create_time = #{date}
            GROUP BY consumer_group, topic  ) cts
        join topic t on cts.topic = t.topic
        join consumer_group c on cts.consumer_group = c.group_name
        ON DUPLICATE KEY UPDATE update_time = #{date}
    </update>


    <resultMap id="consumerGroupHostingResultMap2" type="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroupHosting">
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="sync_time" property="syncTime" />

        <association property="broker"
                     column="bid"
                     foreignColumn="id"
                     javaType="com.ndpmedia.rocketmq.cockpit.model.Broker"
                     select="com.ndpmedia.rocketmq.cockpit.mybatis.mapper.BrokerMapper.get" />

        <association property="consumerGroup"
                     column="cid"
                     foreignColumn="id"
                     javaType="com.ndpmedia.rocketmq.cockpit.model.ConsumerGroup"
                     select="get" />
    </resultMap>

    <select id="queryEndangeredHosting" resultMap="consumerGroupHostingResultMap2">
        <![CDATA[
            SELECT b.id AS bid, cg.id AS cid, bcgx.create_time, bcgx.update_time, bcgx.sync_time
            FROM consumer_group AS cg
            LEFT JOIN broker_consumer_group_xref AS bcgx ON bcgx.consumer_group_id = cg.id
            LEFT JOIN broker AS b ON b.id = bcgx.broker_id
            WHERE cg.status_id IN (3, 5)
            AND (bcgx.sync_time IS NULL OR bcgx.sync_time > CURRENT_TIMESTAMP - INTERVAL 600 SECOND)
            AND (b.broker_id = 0 OR b.broker_id IS NULL)
        ]]>
        <if test="brokerId > 0">
            AND b.id = #{brokerId}
        </if>
    </select>

</mapper>