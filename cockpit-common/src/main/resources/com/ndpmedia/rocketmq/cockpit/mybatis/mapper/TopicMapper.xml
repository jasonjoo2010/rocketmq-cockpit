<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ndpmedia.rocketmq.cockpit.mybatis.mapper.TopicMapper">

    <insert id="insert" parameterType="com.ndpmedia.rocketmq.cockpit.model.Topic" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO topic (id, topic, cluster_name, `order`, create_time, update_time)
        VALUES (NULL, #{topic}, #{clusterName},  #{order}, #{createTime}, #{updateTime})
    </insert>

    <insert id="insertTopicBrokerInfo">
        INSERT INTO topic_broker_xref(broker_id, topic_id, permission, write_queue_num, read_queue_num, status_id, create_time, update_time)
        VALUES (#{brokerId}, #{topic.id}, #{topic.permission}, #{topic.readQueueNum}, #{topic.writeQueueNum},
                #{topic.status.ordinal}, #{topic.createTime}, #{topic.updateTime})
    </insert>

    <insert id="connectProject">
        INSERT INTO project_topic_xref(topic_id, project_id)
        VALUES (#{topicId}, #{projectId})
    </insert>

    <select id="getProjects" resultType="long">
        SELECT DISTINCT xref.project_id
        FROM project_topic_xref AS xref
        <if test="topic != null">
            JOIN topic AS t ON t.id = xref.topic_id
        </if>
        WHERE 1 = 1
        <if test="topic != null">
            AND topic = #{topic}
        </if>
        <if test="topicId > 0">
            AND topic_id = #{topicId}
        </if>
    </select>

    <delete id="disconnectProject">
        DELETE
        FROM project_topic_xref
        WHERE 1 = 1
        <if test="topicId > 0">
            AND topic_id = #{topicId}
        </if>

        <if test="projectId > 0">
            AND project_id = #{projectId}
        </if>
    </delete>

    <update id="update" parameterType="com.ndpmedia.rocketmq.cockpit.model.Topic">
        UPDATE topic
        SET topic = #{topic},
            cluster_name = #{clusterName},
            `order` = #{order},
            create_time = #{createTime},
            update_time = #{updateTime}
        WHERE id = #{id}
    </update>

    <update id="updateTopicBrokerInfo">
        UPDATE topic_broker_xref
        SET permission = #{topic.permission},
            write_queue_num = #{topic.writeQueueNum},
            read_queue_num = #{topic.readQueueNum},
            status_id = #{topic.status, typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"},
            update_time = CURRENT_TIMESTAMP
        WHERE broker_id = #{brokerId}
        AND topic_id = #{topic.id}
    </update>

    <update id="refresh">
        UPDATE topic_broker_xref
        SET update_time = CURRENT_TIMESTAMP,
            sync_time = CURRENT_TIMESTAMP
        WHERE broker_id = #{brokerId}
        AND topic_id = #{topicId}
    </update>

    <delete id="delete" parameterType="long">
        DELETE
        FROM topic
        WHERE id = #{id}
    </delete>

    <resultMap id="topicMap" type="com.ndpmedia.rocketmq.cockpit.model.Topic">
        <id column="id" property="id" />
        <result column="topic" property="topic" />
        <result column="cluster_name" property="clusterName" />
        <result column="permission" property="permission" />
        <result column="write_queue_num" property="writeQueueNum" />
        <result column="read_queue_num" property="readQueueNum" />
        <result column="`order`" property="order" />
        <result column="status_id" property="status"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"
                javaType="com.ndpmedia.rocketmq.cockpit.model.Status" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <select id="get" resultMap="topicMap">
        SELECT id, topic, cluster_name, permission, write_queue_num, read_queue_num, `order`, status_id, t.create_time, t.update_time
        FROM topic AS t
        JOIN topic_broker_xref AS xref ON t.id = xref.topic_id
        WHERE 1 = 1
        <if test="id > 0">
            AND id = #{id}
        </if>
        <if test="topic != null">
            AND topic = #{topic}
        </if>
    </select>

    <select id="list" resultMap="topicMap">
        SELECT t.id, t.topic, tbx.permission, tbx.write_queue_num, tbx.read_queue_num,  t.`order`, tbx.create_time, tbx.update_time
        FROM topic AS t
        JOIN topic_broker_xref AS tbx ON t.id = tbx.topic_id
        <if test="projectId > 0">
            JOIN project_topic_xref AS xref ON t.id = xref.topic_id
        </if>
        <if test="broker != null">
            JOIN broker AS b ON b.id = tbx.broker_id
        </if>
        WHERE 1 = 1
        <if test="projectId > 0">
            AND xref.project_id = #{projectId}
        </if>

        <if test="statusId > 0">
            AND status_id = #{status}
        </if>

        <if test="broker != null">
            AND b.address = #{broker}
        </if>

        <if test="cluster != null">
            AND t.cluster_name = #{cluster}
        </if>
    </select>

    <select id="queryTopicsAvailability" resultType="com.ndpmedia.rocketmq.cockpit.model.TopicAvailability">
        SELECT tdx.topic_id AS topicId
        , tdx.dc_id AS dcId
        , COUNT(b.id) AS availability
        FROM topic_dc_xref AS tdx
        LEFT JOIN topic_broker_xref AS tbx ON tdx.topic_id = tbx.topic_id
        LEFT JOIN broker AS b ON b.id = tbx.broker_id AND b.dc = tdx.dc_id
        WHERE b.broker_id = 0
        GROUP BY tdx.dc_id, tdx.topic_id
        ORDER BY availability ASC
    </select>

    <resultMap id="dataCenterResultMap" type="com.ndpmedia.rocketmq.cockpit.model.DataCenter">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="status" property="status"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"
                javaType="com.ndpmedia.rocketmq.cockpit.model.Status" />
    </resultMap>

    <select id="queryAllowedDC" resultMap="dataCenterResultMap" parameterType="long">
        SELECT xref.status, dc.id, dc.name
        FROM topic_dc_xref AS xref
        JOIN data_center AS dc ON xref.dc_id = dc.id
        WHERE xref.topic_id = #{topicId}
    </select>

    <select id="queryTopicHostingBrokerIds" resultType="java.lang.Long">
        SELECT xref.broker_id
        FROM topic_broker_xref AS xref
             JOIN broker AS b ON xref.broker_id = b.id
        WHERE xref.topic_id = #{brokerId}
              AND b.dc = #{dcId}
              AND b.broker_id = 0
    </select>

    <select id="queryAssociatedConsumerGroup" resultType="java.lang.Long">
        SELECT consumer_group_id
        FROM topic_consumer_group_xref
        WHERE topic_id = #{topicId}
    </select>

    <resultMap id="TopicHostingResultMap" type="com.ndpmedia.rocketmq.cockpit.model.TopicHosting">
        <association property="broker" javaType="com.ndpmedia.rocketmq.cockpit.model.Broker">
            <id column="id" property="id" />
            <result column="cluster_name" property="clusterName" />
            <result column="broker_name" property="brokerName" />
            <result column="broker_id" property="brokerId" />
            <result column="address" property="address" />
            <result column="version" property="version" />
            <result column="dc" property="dc" />
            <result column="create_time" property="createTime" />
            <result column="update_time" property="updateTime" />
        </association>

        <association property="topicInfo" javaType="com.ndpmedia.rocketmq.cockpit.model.TopicInfo">
            <result column="topicId" property="topicId" />
            <result column="permission" property="permission" />
            <result column="write_queue_num" property="writeQueueNum" />
            <result column="read_queue_num" property="readQueueNum" />
            <result column="status_id" property="status"
                    typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"
                    javaType="com.ndpmedia.rocketmq.cockpit.model.Status" />
            <result column="topic_info_create_time" property="createTime" />
            <result column="topic_info_update_time" property="updateTime" />
            <result column="sync_time" property="syncTime" />
        </association>
    </resultMap>

    <select id="queryHosting" resultMap="TopicHostingResultMap">
        SELECT b.id, b.cluster_name, broker_name, b.broker_id, address, version, dc, b.create_time, b.update_time
             , xref.topic_id AS topicId, xref.permission, xref.write_queue_num, xref.read_queue_num, xref.status_id, xref.create_time AS topic_info_create_time, xref.update_time AS topic_info_update_time, xref.sync_time
        FROM broker AS b
        JOIN topic_broker_xref AS xref ON b.id = xref.broker_id
        <if test="topic != null">
        JOIN topic AS t ON t.id = xref.topic_id
        </if>
        WHERE 1 = 1
        <if test="topicId > 0">
            AND xref.topic_id = #{topicId}
        </if>

        <if test="topic != null">
            AND t.topic = #{topic}
        </if>

        <if test="dcId > 0">
            AND b.dc = #{dcId}
        </if>
    </select>
</mapper>