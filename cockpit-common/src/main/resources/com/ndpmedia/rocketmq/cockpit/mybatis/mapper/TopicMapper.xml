<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ndpmedia.rocketmq.cockpit.mybatis.mapper.TopicMapper">

    <insert id="insert" parameterType="com.ndpmedia.rocketmq.cockpit.model.Topic" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO topic (id, topic, cluster_name, permission, write_queue_num, read_queue_num, unit, has_unit_subscription, broker_address, order_type, status_id, create_time, update_time)
        VALUES (NULL, #{topic}, #{clusterName}, #{permission}, #{writeQueueNum}, #{readQueueNum}, #{unit}, #{hasUnitSubscription}, #{brokerAddress}, #{order}, #{status.id}, #{createTime}, #{updateTime})
    </insert>

    <insert id="connectProject">
        INSERT INTO project_topic_xref(topic_id, project_id)
        VALUES (#{topicId}, #{projectId})
    </insert>

    <select id="getProjects" resultType="long">
        SELECT DISTINCT xref.project_id
        FROM project_topic_xref AS xref
        <if test="topic != null">
            JOIN topic AS t ON t.id = xref.topic_id
        </if>
        WHERE 1 = 1
        <if test="topic != null">
            AND topic = #{topic}
        </if>
        <if test="topicId > 0">
            AND topic_id = #{topicId}
        </if>
    </select>

    <delete id="disconnectProject">
        DELETE
        FROM project_topic_xref
        WHERE 1 = 1
        <if test="topicId > 0">
            AND topic_id = #{topicId}
        </if>

        <if test="projectId > 0">
            AND project_id = #{projectId}
        </if>
    </delete>

    <update id="update" parameterType="com.ndpmedia.rocketmq.cockpit.model.Topic">
        UPDATE topic SET topic = #{topic}, cluster_name = #{clusterName},
            permission = #{permission}, write_queue_num = #{writeQueueNum},
            read_queue_num = #{readQueueNum}, unit = #{unit},
            has_unit_subscription = #{hasUnitSubscription}, broker_address = #{brokerAddress},
            order_type = #{order}, status_id = #{status.id},
            create_time = #{createTime}, update_time = #{updateTime}
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE
        FROM topic
        WHERE id = #{id}
    </delete>

    <resultMap id="topicMap" type="com.ndpmedia.rocketmq.cockpit.model.Topic">
        <id column="id" property="id" />
        <result column="topic" property="topic" />
        <result column="cluster_name" property="clusterName" />
        <result column="permission" property="permission" />
        <result column="write_queue_num" property="writeQueueNum" />
        <result column="read_queue_num" property="readQueueNum" />
        <result column="unit" property="unit" />
        <result column="has_unit_subscription" property="hasUnitSubscription" />
        <result column="broker_address" property="brokerAddress" />
        <result column="order_type" property="order" />
        <result column="status_id" property="status"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"
                javaType="com.ndpmedia.rocketmq.cockpit.model.Status" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <select id="get" resultMap="topicMap">
        SELECT id, topic, cluster_name, permission, write_queue_num, read_queue_num, unit, has_unit_subscription, broker_address, order_type, status_id, create_time, update_time
        FROM topic
        WHERE 1 = 1
        <if test="id > 0">
            AND id = #{id}
        </if>
        <if test="topic != null">
            AND topic = #{topic}
        </if>
    </select>

    <select id="list" resultMap="topicMap">
        SELECT t.id, t.topic, t.permission, t.write_queue_num, t.read_queue_num, t.unit, t.has_unit_subscription, t.order_type, min(create_time) as create_time, max(update_time) as update_time
        FROM topic AS t
        <if test="projectId > 0">
            JOIN project_topic_xref AS xref ON t.id = xref.topic_id
        </if>
        WHERE 1 = 1
        <if test="projectId > 0">
            AND xref.project_id = #{projectId}
        </if>

        <if test="statusId > 0">
            AND status_id = #{status}
        </if>

        <if test="broker != null">
            AND t.broker_address = #{broker}
        </if>

        <if test="cluster != null">
            AND t.cluster_name = #{cluster}
        </if>
    </select>

    <select id="queryTopicsAvailability" resultType="com.ndpmedia.rocketmq.cockpit.model.TopicAvailability">
        SELECT topic_dc_xref.topic_id AS topicId
        , topic_dc_xref.dc_id AS dcId
        , COUNT(broker.id) AS availability
        FROM topic_dc_xref
        LEFT JOIN topic_broker_xref ON topic_dc_xref.topic_id = topic_broker_xref.topic_id
        LEFT JOIN broker ON broker.id = topic_broker_xref.broker_id AND broker.dc = topic_dc_xref.dc_id
        GROUP BY topic_dc_xref.dc_id, topic_dc_xref.topic_id
        ORDER BY availability ASC
    </select>

    <resultMap id="dataCenterResultMap" type="com.ndpmedia.rocketmq.cockpit.model.DataCenter">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="status" property="status"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"
                javaType="com.ndpmedia.rocketmq.cockpit.model.Status" />
    </resultMap>

    <select id="queryAllowedDC" resultMap="dataCenterResultMap" parameterType="long">
        SELECT xref.status, dc.id, dc.name
        FROM topic_dc_xref AS xref
        JOIN data_center AS dc ON xref.dc_id = dc.id
        WHERE xref.topic_id = #{topicId}
    </select>

    <select id="queryTopicHostingBrokerIds" resultType="java.lang.Long">
        SELECT xref.broker_id
        FROM topic_broker_xref AS xref
             JOIN broker AS b ON xref.broker_id = b.id
        WHERE xref.topic_id = #{brokerId} AND b.dc = #{dcId}
    </select>

    <select id="queryAssociatedConsumerGroup" resultType="java.lang.Long">
        SELECT consumer_group_id
        FROM topic_consumer_group_xref
        WHERE topic_id = #{topicId}
    </select>
</mapper>